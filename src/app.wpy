<style lang="less">

</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import '@/utils/index'


  export default class extends wepy.app {
    config = {
      pages: [
        'pages/tabs/home',
        'pages/tabs/cates',
        'pages/tabs/cart',
        'pages/tabs/search',
        'pages/tabs/my',
        'pages/goods_detail/index',
        'pages/goods_list/index'
      ],
      "usingComponents": {
        "van-sidebar": "./components/vant/sidebar/index",
        "van-sidebar-item": "./components/vant/sidebar-item/index",
        "van-grid": "./components/vant/grid/index",
        "van-grid-item": "./components/vant/grid-item/index",
        "van-search": "./components/vant/search/index",
        "van-cell": "./components/vant/cell/index",
        "van-cell-group": "./components/vant/cell-group/index",
        "van-icon": "./components/vant/icon/index",
        "van-tag": "./components/vant/tag/index",
        "van-card": "./components/vant/card/index",
        "van-tab": "./components/vant/tab/index",
        "van-tabs": "./components/vant/tabs/index",
        "van-goods-action": "./components/vant/goods-action/index",
        "van-goods-action-icon": "./components/vant/goods-action-icon/index",
        "van-goods-action-button": "./components/vant/goods-action-button/index",
        "van-stepper": "./components/vant/stepper/index",
        "van-checkbox": "./components/vant/checkbox/index",
        "van-swipe-cell": "./components/vant/swipe-cell/index",
        "van-submit-bar": "./components/vant/submit-bar/index"
      },
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#FF0000',
        navigationBarTitleText: '购物商城',
        navigationBarTextStyle: 'white'
      },
      tabBar: {
        list: [{
            pagePath: "pages/tabs/home",
            text: "首页",
            iconPath: "./assets/icons/home.png",
            selectedIconPath: "./assets/icons/home-active.png"
          },
          {
            pagePath: "pages/tabs/cates",
            text: "分类",
            iconPath: "./assets/icons/cates.png",
            selectedIconPath: "./assets/icons/cates-active.png"
          },
          {
            pagePath: "pages/tabs/search",
            text: "搜索",
            iconPath: "./assets/icons/search.png",
            selectedIconPath: "./assets/icons/search-active.png"
          },
          {
            pagePath: "pages/tabs/cart",
            text: "购物车",
            iconPath: "./assets/icons/cart.png",
            selectedIconPath: "./assets/icons/cart-active.png"
          },
          {
            pagePath: "pages/tabs/my",
            text: "我的",
            iconPath: "./assets/icons/my.png",
            selectedIconPath: "./assets/icons/my-active.png"
          }
        ]
      }
    }

    globalData = {
      //全局变量 购物车
      cart: []
    }

    //全局的方法 添加到购物车
    addToCart(goods) {
      const index = this.globalData.cart.findIndex(item => {
        return item.id == goods.goods_id
      })
      // 判断是否存 是的话新增，不是的话就count++
      if (index == -1) {
        const goodsObj = {
          // 商品id
          id: goods.goods_id,
          // 商品名称
          name: goods.goods_name,
          // 商品价格
          price: goods.goods_price,
          // 商品数量
          count: 1,
          // 商品图片
          pic: goods.goods_big_logo,
          // 是否购买
          isCheck: true
        }
        this.globalData.cart.push(goodsObj)
      } else {
        this.globalData.cart[index].count++
      }
      this.seaveCart()
    }

    //全局的方法 修改购物车的数量
    updataToCart(id, count) {
      // 判断是否存在
      const index = this.globalData.cart.findIndex(item => {
        return item.id === id
      })
      if (index !== -1) {
        this.globalData.cart[index].count = count
        this.seaveCart()
      }
    }

    //全局的方法 修改购物车勾选的状态
    updataToCheck(id, check) {
      // 判断是否存在
      const index = this.globalData.cart.findIndex(item => {
        return item.id === id
      })
      if (index !== -1) {
        this.globalData.cart[index].isCheck = check
        this.seaveCart()
      }
    }

    //全局的方法 删除购物车商品信息
    deleteShopMsg(id) {
      // 判断是否存在
      const index = this.globalData.cart.findIndex(item => item.id === id)
      this.globalData.cart.splice(index, 1)
      this.seaveCart()
    }

    //全局的方法 全选
    checkToAll(flag) {
      this.globalData.cart.forEach(item => {
        item.isCheck = flag
      })
      this.seaveCart()
    }

    // 本地化
    seaveCart() {
      wepy.setStorageSync('cart', this.globalData.cart)
    }

    constructor() {
      super()
      this.use('requestfix')
      this.use('promisify')
      // 拦截request请求
      this.intercept('request', {
        // 发出请求时的回调函数
        config(p) {
          // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
          // 必须返回OBJECT参数对象，否则无法发送请求到服务端
          wepy.showLoading({
            title: "正在拼命加载中"
          })
          return p;
        },

        // 请求成功后的回调函数
        success(p) {
          // 可以在这里对收到的响应数据对象进行加工处理
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p;
        },

        //请求失败后的回调函数
        fail(p) {
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p;
        },

        // 请求完成时的回调函数(请求成功或失败都会被执行)
        complete(p) {
          wepy.hideLoading()
        }
      });
    }
    onLaunch() {
      this.globalData.cart = wepy.getStorageSync('cart') || []
    }
  }

</script>
